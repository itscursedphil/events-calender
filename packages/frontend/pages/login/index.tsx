import {
  Box,
  Button,
  Container,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Heading,
  Input,
  VStack,
} from '@chakra-ui/react';
import { ErrorMessage, Field, Form, Formik } from 'formik';
import { NextPage } from 'next';
import Head from 'next/head';
import React, { useState } from 'react';
import Header from '../../components/Header';
import Main from '../../components/Main';
import * as Yup from 'yup';
import { LoginResponseData } from '../api/login';

interface LoginFormValues {
  email: string;
  password: string;
}

const initialFormValues: LoginFormValues = {
  email: '',
  password: '',
};

const validationSchema = Yup.object().shape({
  email: Yup.string()
    .email('Bitte gib eine korrekte E-Mail Adresse ein')
    .required('Bitte gib eine E-Mail Adresse ein'),
  password: Yup.string().required('Bitte gib ein Passwort ein'),
});

const useLogin = (): [
  (identifier: string, password: string) => any,
  { loading: boolean }
] => {
  const [loading, setLoading] = useState(false);

  const login = async (identifier: string, password: string) => {
    setLoading(true);

    await fetch('/api/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ identifier, password }),
    });

    setLoading(false);
  };

  return [login, { loading }];
};

const LoginPage: NextPage = () => {
  const [login, { loading }] = useLogin();

  const handleFormSubmit = async (values: LoginFormValues) => {
    await login(values.email, values.password);
  };

  return (
    <div>
      <Head>
        <title>Login - Events Calender</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <Header />
        <Main>
          <Heading as="h2" size="lg">
            Login
          </Heading>
          <Box mt={6}>
            <Formik<LoginFormValues>
              initialValues={initialFormValues}
              onSubmit={handleFormSubmit}
              validationSchema={validationSchema}
            >
              {({ errors, touched, isValid, dirty }) => (
                <Form noValidate>
                  <VStack spacing={4} align="stretch">
                    <FormControl isInvalid={touched.email && !!errors.email}>
                      <FormLabel>Email</FormLabel>
                      <Field as={Input} name="email" type="email" />
                      <ErrorMessage component={FormErrorMessage} name="email" />
                    </FormControl>
                    <FormControl
                      isInvalid={touched.password && !!errors.password}
                    >
                      <FormLabel>Passwort</FormLabel>
                      <Field as={Input} name="password" type="password" />
                      <ErrorMessage
                        component={FormErrorMessage}
                        name="password"
                      />
                    </FormControl>
                    <Button
                      type="submit"
                      disabled={loading || !dirty || !isValid}
                    >
                      Anmelden
                    </Button>
                  </VStack>
                </Form>
              )}
            </Formik>
          </Box>
        </Main>
      </Container>
    </div>
  );
};

export default LoginPage;
